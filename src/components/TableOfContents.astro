---
import TableOfContentsHeading from "./TableOfContentsHeading.astro";

interface Heading {
  depth: number;
  slug: string;
  text: string;
}

interface Props {
  headings: {
    depth: number;
    slug: string;
    text: string;
  }[];
}

const buildToc = (headings: Heading[]) => {
  const toc = [];
  const parentHeadings = new Map();
  headings.forEach((h) => {
    const heading = { ...h, subheadings: [] };
    parentHeadings.set(heading.depth, heading);
    // Change 2 to 1 if your markdown includes your <h1>
    if (heading.depth === 2) {
      toc.push(heading);
    } else {
      parentHeadings.get(heading.depth - 1)?.subheadings.push(heading);
    }
  });
  return toc;
};

const { headings } = Astro.props;
const toc = buildToc(headings);
---

<nav class="not-prose text-black/20 transition-colors hover:text-black/50">
  <ul
    id="table-of-contents"
    class="flex flex-col gap-1 overflow-y-auto list-none m-0 p-0 transition-colors"
  >
    {toc.map((heading) => <TableOfContentsHeading heading={heading} />)}
  </ul>
</nav>

<script>
  window.addEventListener("scroll", () => {
    const links = document.querySelectorAll("#table-of-contents a");
    const fromTop = window.scrollY;

    links.forEach((link) => {
      const href = link.getAttribute("href");
      const hash = href.substring(href.indexOf("#"));
      const section = document.querySelector(hash);

      const top = section?.getBoundingClientRect().top;
      const height = section?.getBoundingClientRect().height;

      if (section && top <= fromTop && top + height > fromTop) {
        console.log(
          top,
          height,
          fromTop,
          top <= fromTop,
          top + height > fromTop
        );
        console.log("active", link);
        link.setAttribute("data-active", "true");
      } else {
        link.setAttribute("data-active", "false");
      }
    });
  });
</script>
