---
import TableOfContentsHeading from "./TableOfContentsHeading.astro";

interface Heading {
  depth: number;
  slug: string;
  text: string;
}

interface Props {
  headings: {
    depth: number;
    slug: string;
    text: string;
  }[];
}

const buildToc = (headings: Heading[]) => {
  const toc = [];
  const parentHeadings = new Map();
  headings.forEach((h) => {
    const heading = { ...h, subheadings: [] };
    parentHeadings.set(heading.depth, heading);
    // Change 2 to 1 if your markdown includes your <h1>
    if (heading.depth === 2) {
      toc.push(heading);
    } else {
      parentHeadings.get(heading.depth - 1)?.subheadings.push(heading);
    }
  });
  return toc;
};

const { headings } = Astro.props;
const toc = buildToc(headings);
---

<nav
  class="not-prose text-black/20 transition-colors duration-100 notouch:hover:text-black/50 overflow-auto"
>
  <ul
    id="table-of-contents"
    class="flex flex-col gap-1 overflow-y-auto list-none m-0 p-0"
  >
    {toc.map((heading) => <TableOfContentsHeading heading={heading} />)}
  </ul>
</nav>

<script>
  // Function to calculate visibility percentage of an element
  function getVisibilityPercentage(rect) {
    const windowHeight = window.innerHeight;
    const top = Math.max(rect.top, 0);
    const bottom = Math.min(rect.bottom, windowHeight);

    return ((bottom - top) / windowHeight) * 100;
  }

  let handleTocScroll = () => {
    const links = document.querySelectorAll("#table-of-contents a");

    // Initialize variables to store the most visible section and its visibility
    let mostVisibleSection = null;
    let maxVisibility = 0;

    // Calculate visibility for each heading
    links.forEach((link) => {
      const href = link.getAttribute("href");
      const hash = href.substring(href.indexOf("#"));
      const heading = document.querySelector(hash);
      const section = heading.closest("section");
      const rect = section.getBoundingClientRect();
      const visibility = getVisibilityPercentage(rect);

      const mostVisibleSectionEl = document
        .querySelector(`#${mostVisibleSection}`)
        ?.closest("section");
      const isInsideOfCurrentMostVisibleSection =
        mostVisibleSectionEl?.contains(section) ?? false;

      if (visibility > maxVisibility || isInsideOfCurrentMostVisibleSection) {
        maxVisibility = visibility;
        mostVisibleSection = heading.id;
      }
    });

    // Remove the 'active' class from all links
    links.forEach((link) => {
      link.setAttribute("data-active", "false");
    });

    // Add the 'active' class to the link corresponding to the closest section
    document
      .querySelector(`#table-of-contents a[href="#${mostVisibleSection}"]`)
      ?.setAttribute("data-active", "true");
  };

  document.addEventListener("astro:page-load", () => {
    const scrollArea = document.querySelector("#scroll-area");
    document.addEventListener("scroll", handleTocScroll);
    scrollArea.addEventListener("scroll", handleTocScroll);
    handleTocScroll();
  });
</script>
