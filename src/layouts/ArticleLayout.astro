---
import type { MarkdownHeading } from "astro";
import { fade } from "astro:transitions";
import RootLayout from "./RootLayout.astro";
import TableOfContents from "../components/TableOfContents.astro";
import { Image } from "astro:assets";
import clsx from "clsx";
import type { ActiveTabType } from "../components/Header.astro";

interface Props {
  id: string;
  title: string;
  description: string;
  headings?: MarkdownHeading[];
  activeTab?: ActiveTabType;
  type: "article" | "project" | "page";
  image?: {
    src?: string;
    width?: number;
    height?: number;
    format?: "png" | "jpg" | "jpeg" | "tiff" | "webp" | "gif" | "svg" | "avif";
  }; // TODO: extract to a type or find astro type
}

const { id, title, image, type, headings, description, activeTab } =
  Astro.props;
---

<RootLayout activeTab={activeTab} title={title} description={description}>
  <main id="content" class="w-full max-w-5xl xl:max-w-6xl mx-auto px-5 py-10">
    <article class="flex flex-col">
      {
        image && (
          <Image
            transition:animate="none"
            densities={[1, 2, 3]}
            class="w-full sticky top-10 left-0 z-10"
            transition:name={`${type}-${id}-image`}
            src={image}
            alt={``}
          />
        )
      }
      <div class={clsx("bg-white flex flex-col gap-10 pb-20 relative z-20")}>
        <h1
          id={`${type}-title`}
          class="font-serif transition-all bg-white data-[scrolled=true]:text-3xl block py-5 z-10 sticky top-0 text-5xl xl:text-6xl"
          transition:name={`${type}-${id}-title`}
        >
          {title}
        </h1>
        <section
          class="w-full flex justify-between flex-row md:gap-14 lg:gap-14 xl:gap-28"
        >
          <div class="prose break-keep hyphens-auto">
            <slot />
          </div>
          {
            headings && (
              <>
                <button
                  id="toggleToc"
                  type="button"
                  class="fixed bg-brand lg:hidden py-4 font-bold text-white bottom-10 right-10 px-3 w-fit rounded-sm z-40"
                >
                  Table of Contents
                </button>
                <aside
                  data-open-on-mobile="false"
                  id="table-of-contents-wrapper"
                  class="lg:sticky left-0 pb-10 px-5 lg:px-0 lg:pb-0 flex flex-col justify-end lg:justify-normal lg:left-auto h-[100dvh] lg:h-auto w-full bg-white fixed bottom-0 translate-y-full data-[open-on-mobile='true']:translate-y-0 lg:translate-y-0 lg:block lg:top-20 xl:top-24 lg:w-[300px] text-lg lg:text-sm xl:text-base max-h-[100dvh] overflow-auto z-30"
                >
                  <TableOfContents headings={headings} />
                </aside>
              </>
            )
          }
        </section>
      </div>
    </article>
  </main>

  <script>
    document.addEventListener(
      "astro:page-load",
      () => {
        const toggleToc = document.getElementById("toggleToc");
        const tocWrapper = document.querySelector("#table-of-contents-wrapper");
        toggleToc.addEventListener("click", () => {
          const openOnMobile = tocWrapper.getAttribute("data-open-on-mobile");
          tocWrapper.setAttribute(
            "data-open-on-mobile",
            openOnMobile === "true" ? "false" : "true"
          );
        });
      },
      { once: true }
    );
  </script>
</RootLayout>
